#!/bin/bash 
# Not sure what this does any more
# PTBatcherGUI --batch --shutdown --verbose --overwrite green.pto

VER='1.1.0'
# CHANGELOG
# 1.0.0 Initial release

# Defaults
CROP_FILE='stitched_crop'               # name of the cropped file
OUTPUT_FILE='stitched'                  # name of the stitched file
PROJECT_FILE='project.pto'              # name of the Hugin project file.
OUTPUT='DEFAULT'                        # SUPRESS | PROCESS | DEFAULT what to do with the stitched file
CROP='DEFAULT'                          # SUPRESS | PROCESS | DEFAULT what to do with the cropped file
PROJECT='DEFAULT'                       # CREATE  | GIVEN   | DEFAULT what project file to use
CLOBBER=0                               # Clobber the Hugin project file if it exists
IMGVAR=0                                # Change the Hugein image variables
PROJECTION_DEFAULT="full_frame_fisheye"  # projection of the images
FOV_DEFAULT=10                          # field of view in degrees.  How many degrees does the image span.

# Report the script version
function version {
    echo "Version: $0 V$VER"
}

# A general purpose function to check to see if a parameter is
# valid
# Parameter: 
# $1 group to check
# $2 choosen option
# $3 option from the command line
function check_generic {
    if [ ${!1} == 'DEFAULT' ] ; then
        eval $1=$2
    else
        help >&2
        >&2 echo -n "ERROR: Invaild parameter combination"
        if [ -n "$3" ]; then
           >&2 echo " related to -$3"
        fi
        exit 1
    fi
}

# Check that command line parameters for cropping do not conflict
function check_crop {
    check_generic "CROP" "$1" "c"
}

# Check that command line parameters for controlling the output of the stitched file conflict
function check_output {
    check_generic "OUTPUT" "$1" "o"
}

# Check that command line parameters for controlling the project file conflict or not
function check_project {
    check_generic "PROJECT" "$1" "r"
}

# check the projection parameter and set the parameters
# Parameter:
# $1 name of the projection to set
function set_projection {
    PROJ=$(echo ${1,,})    # convert the projection to lowercase
    # The values are defined in an emun given here
    #http://fossies.org/dox/hugin-2015.0.0/SrcPanoImage_8h_source.html
    #enum Projection {
    #   RECTILINEAR = 0,
    #   PANORAMIC = 1,
    #   CIRCULAR_FISHEYE = 2,
    #   FULL_FRAME_FISHEYE = 3,
    #   EQUIRECTANGULAR = 4,
    #   FISHEYE_ORTHOGRAPHIC = 8,
    #   FISHEYE_STEREOGRAPHIC = 10,
    #   FISHEYE_EQUISOLID = 21,
    #   FISHEYE_THOBY = 20
    #};
   
    case "$PROJ" in
    0|rectilinear)
        PROJECTION="rectilinear"
        PROJECTION_VALUE=0
        ;;
    1|panoramic)
        PROJECTION="panoramic"
        PROJECTION_VALUE=1
        ;;
    2|circular_fisheye)
        PROJECTION="circular_fisheye"
        PROJECTION_VALUE=2
        ;;
    3|full_frame_fisheye)
        PROJECTION="full_frame_fisheye"
        PROJECTION_VALUE=3
        ;;
    4|equirectangular)
        PROJECTION="equirectangular"
        PROJECTION_VIEW=4
        ;;
    8|fisheye_orthographic)
        PROJECTION="fisheye_orthographic"
        PROJECTION_VALUE=8
        ;;
    10|fisheye_stereographic)
        PROJECTION="fisheye_stereographic"
        PROJECTION_VALUE=10
        ;;
    21|fisheye_equisolid)
        PROJECTION="fisheye_equisolid"
        PROJECTION_VALUE=21
        ;;
    20|fisheye_thoby)
        PROJECTION="fisheye_thoby"
        PROJECTION_VALUE=20
        ;;
    *)  >&2 echo "ERROR: invalid projection $1"
        help
        exit 1
        ;;
    esac
}

# Set the field of view value
function set_fov {
    FOV="$1"
}

function help {
    echo "USAGE: $0 [-h] [-v] [-o | -O <OUTPUT>] [-c | -C <OUTPUT_CROP>] [-r <PROJECT> | [-d] [-f <FOV>] [-V] [-p <PROJECTION>] [-R <PROJECT>] IMAGE_LIST] "
    echo "     c               Suppress the output of the cropped file"
    echo "     C               Name of the cropped file with no extension.  Default: $CROP_FILE"
    echo "     d               clobber the Hugin project file if it exists"
    echo "     f               field of view in degrees. How many degrees does the image span.  Default $FOV_DEFAULT"
    echo "     h               Prints this help message"
    echo "     o               Supress the output of the stitched file"
    echo "     O               Name of the stitched file with no extension.  Default: $OUTPUT_FILE"
    echo "     p               Projection: 0:rectilinear, 1:panoramic, 2:circular_fisheye, 3:full_frame_fisheye"
    echo "                     4:equirectangular, 8:fisheye_orthographic, 10:fisheye_stereographic, 21:fisheye_equisolid"
    echo "                     20:fisheye_thoby.  Default: $PROJECTION_DEFAULT"
    echo "     r               Use the supplied Hugin project file"
    echo "     R               Create a Hugin project file called <PROJECT>.  Default is project.pto"
    echo "     v               Prints the version"
    echo "     V               Change image variables inside Hugin .pto project file"
    echo "     IMAGE_LIST      A list of images to process. Must be in the last positions.  Wildcard expansion is performed"
}

# Pass an array and echo a  
function quoted_array {
    local myarray=("${!1}")
    #local myarray=($1)
    for x in "${myarray[@]}"; do
            echo -n "'$x' "
    done
}

# Setup defaults
set_projection "$PROJECTION_DEFAULT"
set_fov "$FOV_DEFAULT"

# Process the command line options
OPTIND=1
while getopts "hvoO:cC:f:p:r:dVR:" opt; do
    case "$opt" in
    c)  check_crop "SUPPRESS" 
        ;;
    C)  check_crop "PROCESS"
        CROP_FILE="$OPTARG"
        ;;
    d)  CLOBBER=1
        ;;
    f)  set_fov "$OPTARG"
        ;;
    h)  help
        exit 1
        ;;
    o)  check_output "SUPPRESS"
        ;;
    O)  check_output "PROCESS"
        OUT_FILE="$OPTARG"
        ;;
    p)  set_projection "$OPTARG"
        ;;
    r)  check_project "GIVEN"
        PROJECT_FILE="$OPTARG"
        ;;
    R)  check_project "CREATE"
        ;;
    v)  version
        ;;
    V)  IMGVER=1
        ;;
    \?) >&2 echo "ERROR: Invalid option -$OPTARG"
        help
        exit 1
        ;;
    :)  >&2 echo "ERROR: -$OPTARG requires an argument"
        help
        exit 1
        ;;
    esac
done
FILE_LIST=("${@:OPTIND}")
shift $((OPTIND-1))

# Check to make sure the more complex parameter limitation hawve not been violated
if [[ "$PROJECT" == "GIVEN" && ( "$CLOBBER" == "1" || "$IMGVER" == "1" || ${#FILE_LIST[*]} -gt 0 ) ]]; then
   check_project "$PROJECT" 
fi

# Check to make sure that the image list is given if a project file is not given.  The project file
# has all the images listed in it.  If there is no project file than a list of images must be provided
# so that the project file can be created.
if [[ "$PROJECT" != "GIVEN" && $# -eq 0 ]]; then
   >&2 echo "ERROR: IMAGE_LIST is missing"
   exit 1;
fi

# We need to create the Hugin pto file
if [[ "$PROJECT" != "GIVEN" ]] ; then
    #http://wiki.panotools.org/Panorama_scripting_in_a_nutshell

    # Generate the basic pto file.  A series of steps will be run to modify the file

    # Generate a Hugin project file from a list of images
    # http://wiki.panotools.org/Pto_gen
    # fov: 
    #    http://hugin.sourceforge.net/docs/manual/Field_of_View.html
    #    Horizontal field of view of images
    #    The number of degrees that make up the visable field
    # projection:  
    #    http://hugin.sourceforge.net/docs/manual/Projections.html
    #    The type of projection that the image represents.
    
   FILE_STRING=$(quoted_array FILE_LIST[@])
   pto_gen --output "$PROJECT_FILE" --projection "$PROJECTION_VALUE" --fov "$FOV" $FILE_STRING 

exit

# Find the control points
cpfind --multirow -o project.pto project.pto

# Clean up the control points. Basically, remove ones that are far away
cpclean -o project.pto project.pto

# Find vertical lines and align the image.  Normally, this does nothing.
linefind --output project.pto project.pto

# optiize the image positions
#autooptimiser -a -m -s -o project.pto project.pto

# Or we could run the optimizer
 pto_var --opt y,p,r -o project.pto project.pto
 autooptimiser -n -o project.pto project.pto

# crop the image
# TODO: make this a commandline option
#pano_modify --canvas=AUTO --crop=AUTO -o project.pto project.pto
pano_modify --canvas=AUTO -o project.pto project.pto

fi

# Prepare the slices
nona -o tmp_ project.pto

# Merge images together
# TODO: parameterise the output filename
enblend --verbose --output $NAME.tif tmp_????.tif

# clean up images
rm tmp_????.tif
